# üöÄ Prompt Definitivo ‚Äî BACKEND Orquestrador RPA BEG Telecomunica√ß√µes

## 1. Contexto Cr√≠tico

Voc√™ √© um **arquiteto/desenvolvedor s√™nior** especializado em Python, FastAPI, automa√ß√£o RPA com Selenium, e engenharia de software robusta.  
Seu desafio √© criar o backend de um sistema de orquestra√ß√£o de RPAs para gerenciamento automatizado de faturas de telecomunica√ß√µes, **seguindo Clean Code, SOLID, tipagem forte, dataclasses, design patterns, rastreabilidade e testabilidade**.

- **Todo o sistema deve ser desenvolvido 100% em portugu√™s brasileiro (vari√°veis, m√©todos, docstrings, mensagens, interface).**
- **Reutilize ao m√°ximo o c√≥digo legado dos RPAs; preserve XPaths, l√≥gicas de scraping, seletores e arquivos de teste individuais.**
- **Adapte as chamadas `self.pm` para a nova l√≥gica de orquestra√ß√£o baseada em processos e execu√ß√µes.**

---

## 2. Stack Tecnol√≥gica

- Python 3.11+
- FastAPI (API REST + WebSockets)
- PostgreSQL (Banco principal)
- Celery + Redis (Orquestra√ß√£o/Filas)
- SQLAlchemy + Pydantic (ORM + valida√ß√£o/tipagem)
- Alembic (Migrations)
- Selenium (RPAs)
- MinIO/S3 (Armazenamento de arquivos)
- Docker (Containeriza√ß√£o)
- EvolutionAPI (WhatsApp)
- SMTP (Email)
- Telegram, Slack (opcional)

---

## 3. Regras de Neg√≥cio Essenciais

### 3.1. Cadastro de Operadoras

- Tabela separada, CRUD completo, campos obrigat√≥rios:
  - **Nome**
  - **C√≥digo identificador √∫nico**
  - **Possui RPA homologado** (`possui_rpa: bool`)
  - **Status ativo/inativo**
  - **URL Portal** (opcional)
  - **Instru√ß√µes/configura√ß√£o** (opcional)
- S√≥ podem ser vinculadas a clientes e processos se estiverem ativas.
- O backend deve expor endpoints claros para gest√£o de operadoras.

### 3.2. Cadastro de Clientes

- Cliente sempre vinculado a uma operadora ativa.
- Unicidade: **CNPJ + Operadora + Unidade (Filial) + Servi√ßo**.
- Campos obrigat√≥rios para automa√ß√£o ou upload manual.
- N√£o permitir clientes em operadoras inativas.

### 3.3. Controle de RPAs e Upload Manual

- Se `possui_rpa = True`, download/upload sempre por RPA (usando padr√£o imut√°vel de entrada/sa√≠da do RPA Base).
- Se `possui_rpa = False`, habilitar upload manual de fatura (apenas para clientes v√°lidos), sujeito ao workflow de aprova√ß√£o.

### 3.4. Cria√ß√£o, Unicidade, Import√¢ncia da HASH e Rastreabilidade de Processos

- **Identificador √önico (Hash):**
  - Gere sempre a hash do cliente/processo conforme a fun√ß√£o `generate_hash_cad` (base: nome_filtro, operadora, servico, dados_sat, filtro, unidade).
  - Use a hash como identificador principal para garantir unicidade, integridade e rastreabilidade, inclusive para evitar duplicidades e garantir o correto v√≠nculo no SAT.
- **Unicidade de processos:** Um processo para cada combina√ß√£o **Cliente (hash) + Operadora + M√™s/Ano**.
- **Rastreabilidade:** M√∫ltiplas execu√ß√µes por processo, todas auditadas (logs, status, timestamps, usu√°rio, par√¢metros de entrada/sa√≠da).
- **Exporta√ß√£o e busca detalhada do hist√≥rico de execu√ß√µes e aprova√ß√µes.**

### 3.5. Workflow de Aprova√ß√£o de Faturas

- Todo processo, autom√°tico ou manual, **deve passar por workflow de aprova√ß√£o** antes do envio ao SAT.
- **Fluxo:**
  1. Processo criado (autom√°tico/manual).
  2. Download via RPA ou upload manual.
  3. Fatura pendente de aprova√ß√£o.
  4. Usu√°rio aprovador revisa, aprova ou rejeita.
  5. Ap√≥s aprova√ß√£o, fatura liberada para upload SAT (RPA SAT).
  6. Logs e notifica√ß√µes autom√°ticas em todas as etapas.
  7. Em caso de rejei√ß√£o, processo pode ser reaberto para nova tentativa.

### 3.6. Notifica√ß√µes, Auditoria e Controle Manual

- Todas as a√ß√µes relevantes (upload manual, aprova√ß√£o, rejei√ß√£o) geram logs de auditoria.
- Notifica√ß√µes autom√°ticas (WhatsApp EvolutionAPI, email, etc.) para usu√°rios respons√°veis.
- O painel administrativo e a API devem permitir consulta, filtragem e exporta√ß√£o do hist√≥rico.

---

## 4. Modelagem de Dados (PostgreSQL)

```sql
CREATE TABLE operadoras (
    id UUID PRIMARY KEY,
    nome VARCHAR(100) UNIQUE NOT NULL,
    codigo VARCHAR(20) UNIQUE NOT NULL,
    possui_rpa BOOLEAN DEFAULT FALSE,
    status_ativo BOOLEAN DEFAULT TRUE,
    url_portal VARCHAR(500),
    instrucoes_acesso TEXT,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE clientes (
    id UUID PRIMARY KEY,
    hash_unico VARCHAR(50) UNIQUE NOT NULL,
    razao_social VARCHAR(255) NOT NULL,
    nome_sat VARCHAR(255) NOT NULL,
    cnpj VARCHAR(20) NOT NULL,
    operadora_id UUID REFERENCES operadoras(id),
    filtro VARCHAR(255),
    servico VARCHAR(255),
    dados_sat TEXT,
    unidade VARCHAR(100) NOT NULL,
    site_emissao VARCHAR(255),
    login_portal VARCHAR(100),
    senha_portal VARCHAR(100),
    cpf VARCHAR(20),
    status_ativo BOOLEAN DEFAULT TRUE,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (cnpj, operadora_id, unidade, servico)
);

CREATE TABLE processos (
    id UUID PRIMARY KEY,
    cliente_id UUID REFERENCES clientes(id),
    mes_ano VARCHAR(7) NOT NULL,
    status_processo VARCHAR(50) DEFAULT 'AGUARDANDO_DOWNLOAD',
    url_fatura VARCHAR(500),
    caminho_s3_fatura VARCHAR(500),
    data_vencimento DATE,
    valor_fatura DECIMAL(15,2),
    aprovado_por_usuario_id UUID,
    data_aprovacao TIMESTAMP,
    enviado_para_sat BOOLEAN DEFAULT FALSE,
    data_envio_sat TIMESTAMP,
    upload_manual BOOLEAN DEFAULT FALSE,
    criado_automaticamente BOOLEAN DEFAULT TRUE,
    observacoes TEXT,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (cliente_id, mes_ano)
);

CREATE TABLE execucoes (
    id UUID PRIMARY KEY,
    processo_id UUID REFERENCES processos(id),
    tipo_execucao VARCHAR(50) CHECK (tipo_execucao IN ('DOWNLOAD_FATURA', 'UPLOAD_SAT', 'UPLOAD_MANUAL')),
    status_execucao VARCHAR(50) CHECK (status_execucao IN ('EXECUTANDO', 'CONCLUIDO', 'FALHOU', 'TENTANDO_NOVAMENTE')),
    parametros_entrada JSONB,
    resultado_saida JSONB,
    data_inicio TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_fim TIMESTAMP,
    mensagem_log TEXT,
    url_arquivo_s3 VARCHAR(500),
    numero_tentativa INTEGER DEFAULT 1,
    detalhes_erro JSONB,
    executado_por_usuario_id UUID REFERENCES usuarios(id),
    ip_origem VARCHAR(45),
    user_agent TEXT
);

CREATE TABLE usuarios (
    id UUID PRIMARY KEY,
    nome_completo VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    telefone VARCHAR(20),
    perfil_usuario VARCHAR(50) CHECK (perfil_usuario IN ('ADMINISTRADOR', 'APROVADOR', 'OPERADOR')),
    status_ativo BOOLEAN DEFAULT TRUE,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE notificacoes (
    id UUID PRIMARY KEY,
    tipo_notificacao VARCHAR(50) CHECK (tipo_notificacao IN ('EMAIL', 'WHATSAPP', 'TELEGRAM', 'SLACK')),
    destinatario VARCHAR(255) NOT NULL,
    assunto VARCHAR(255),
    mensagem TEXT NOT NULL,
    status_envio VARCHAR(50) DEFAULT 'PENDENTE',
    tentativas_envio INTEGER DEFAULT 0,
    data_envio TIMESTAMP,
    mensagem_erro TEXT,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE agendamentos (
    id UUID PRIMARY KEY,
    nome_agendamento VARCHAR(255) NOT NULL,
    descricao TEXT,
    cron_expressao VARCHAR(100) NOT NULL,
    tipo_agendamento VARCHAR(50) CHECK (tipo_agendamento IN ('CRIAR_PROCESSOS_MENSAIS', 'EXECUTAR_DOWNLOADS', 'ENVIAR_RELATORIOS')),
    status_ativo BOOLEAN DEFAULT TRUE,
    proxima_execucao TIMESTAMP,
    ultima_execucao TIMESTAMP,
    parametros_execucao JSONB,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

## 5. RPA Base Concentrador e Integra√ß√£o Legado

- Todos os RPAs devem herdar de uma classe imut√°vel `RPABase`, com entrada/sa√≠da padronizadas (`ParametrosEntradaPadrao` e `ResultadoSaidaPadrao`).
- Um `ConcentradorRPA` centraliza a escolha do RPA correto por filtro/c√≥digo de operadora.
- **Reutilize todo c√≥digo legado dos RPAs:**  
  - Preserve XPaths, l√≥gica de scraping, seletores, testes unit√°rios isolados.
  - Adapte apenas o controle de processos e execu√ß√µes para se integrar √† nova arquitetura.
- Assegure que execu√ß√µes manuais (operadoras sem RPA) tamb√©m sejam auditadas, rastreadas e entrem no workflow de aprova√ß√£o.

---

## 6. Endpoints Backend (Sugest√£o)

- `/api/operadoras/` ‚Äî CRUD de operadoras
- `/api/clientes/` ‚Äî CRUD de clientes
- `/api/processos/` ‚Äî CRUD de processos, cria√ß√£o mensal e busca
- `/api/execucoes/` ‚Äî CRUD e consulta de execu√ß√µes
- `/api/faturas/upload-manual/` ‚Äî Upload manual de fatura
- `/api/aprovacoes/` ‚Äî Workflow de aprova√ß√£o/rejei√ß√£o de faturas
- `/api/notificacoes/` ‚Äî Notifica√ß√µes e hist√≥rico
- `/api/agendamentos/` ‚Äî Agendamento de tarefas autom√°ticas
- `/api/rpa/executar-download/` ‚Äî Disparo de download via RPA Base
- `/api/rpa/executar-upload-sat/` ‚Äî Envio SAT via RPA Base
- `/api/dashboard/` ‚Äî M√©tricas e logs em tempo real (WebSocket)
- **Todos os endpoints, models, docstrings e mensagens em portugu√™s BR**

---

## 7. Requisitos T√©cnicos & Arquiteturais

- **Arquitetura Limpa:** Separe dom√≠nio, aplica√ß√£o, infraestrutura e apresenta√ß√£o.
- **Tipagem forte:** Use dataclasses, enums, type hints e valida√ß√£o Pydantic.
- **Testabilidade:** Testes unit√°rios e integra√ß√£o (>85% coverage) ‚Äî mantenha arquivos de teste individuais dos RPAs.
- **Rastreabilidade/Auditoria:** Logs detalhados de todas as execu√ß√µes, aprova√ß√µes, rejei√ß√µes e uploads manuais.
- **Notifica√ß√µes autom√°ticas:** E-mail, WhatsApp (EvolutionAPI), etc.
- **Deployment:** Docker Compose, vari√°veis de ambiente, scripts de setup.
- **Documenta√ß√£o:** OpenAPI/Swagger + README t√©cnico e de arquitetura.
- **Performance e robustez:** Utilizar Celery para filas, Redis para cache/processos, pooling de conex√µes, transa√ß√µes seguras.

---

## 8. Observa√ß√µes Finais

- **Leia arquivo por arquivo do legado, preserve e adapte o que for necess√°rio!**
- **Implemente o hash de identifica√ß√£o como regra central de unicidade e rastreabilidade!**
- **Workflow de aprova√ß√£o √© obrigat√≥rio para todos os fluxos (RPA/Manual)!**
- **Frontend ser√° Next.js/Material UI inspirado em ngx-admin, mas concentre-se aqui APENAS NO BACKEND.**
- **Tudo em portugu√™s brasileiro, limpo e padronizado!**

---

**Desenvolvido por: Tiago Pereira Ramos**  
**Data: 29/05/2025**  
**Prompt: Backend Orquestrador RPA BEG Telecomunica√ß√µes**