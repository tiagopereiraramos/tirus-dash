"""
Sistema de Notifica√ß√µes Avan√ßado
EvolutionAPI WhatsApp + Email SMTP
Conforme especifica√ß√£o do manual da BGTELECOM
Desenvolvido por: Tiago Pereira Ramos
Data: 29/05/2025
"""

import logging
import smtplib
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, List, Optional
from datetime import datetime

from ..config.settings import configuracoes

logger = logging.getLogger(__name__)

class NotificacaoService:
    """
    Sistema completo de notifica√ß√µes
    WhatsApp via EvolutionAPI + Email SMTP
    """
    
    def __init__(self):
        self.configuracoes = configuracoes
        logger.info("Sistema de notifica√ß√µes inicializado")
    
    async def enviar_notificacao_aprovacao_pendente(
        self,
        processo_id: str,
        cliente_nome: str,
        operadora_nome: str,
        valor_fatura: Optional[float] = None,
        destinatarios: List[str] = None
    ):
        """Notifica sobre fatura pendente de aprova√ß√£o"""
        try:
            titulo = "Nova Fatura Pendente de Aprova√ß√£o"
            
            # Mensagem WhatsApp
            whatsapp_msg = f"""
üîî *NOVA FATURA PARA APROVA√á√ÉO*

üìã Processo: {processo_id}
üè¢ Cliente: {cliente_nome}
üì° Operadora: {operadora_nome}
üí∞ Valor: R$ {valor_fatura:.2f if valor_fatura else 'N/I'}

‚è∞ Aguardando aprova√ß√£o no sistema RPA
üîó Acesse o sistema para aprovar/rejeitar

*Sistema Orquestrador RPA - BGTELECOM*
            """
            
            # Email HTML
            email_html = f"""
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <div style="background-color: #f8f9fa; padding: 20px;">
                        <h2 style="color: #dc3545;">üîî Nova Fatura Pendente de Aprova√ß√£o</h2>
                        
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3>Detalhes da Fatura:</h3>
                            <ul>
                                <li><strong>Processo:</strong> {processo_id}</li>
                                <li><strong>Cliente:</strong> {cliente_nome}</li>
                                <li><strong>Operadora:</strong> {operadora_nome}</li>
                                <li><strong>Valor:</strong> R$ {valor_fatura:.2f if valor_fatura else 'N√£o informado'}</li>
                                <li><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</li>
                            </ul>
                        </div>
                        
                        <p style="color: #6c757d;">
                            Acesse o sistema RPA para aprovar ou rejeitar esta fatura.
                        </p>
                        
                        <hr>
                        <small style="color: #6c757d;">Sistema Orquestrador RPA - BGTELECOM</small>
                    </div>
                </body>
            </html>
            """
            
            # Enviar notifica√ß√µes
            await self._enviar_whatsapp(whatsapp_msg, destinatarios)
            await self._enviar_email(titulo, email_html, destinatarios)
            
            logger.info(f"Notifica√ß√£o de aprova√ß√£o pendente enviada para processo {processo_id}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o de aprova√ß√£o pendente: {e}")
    
    async def enviar_notificacao_fatura_aprovada(
        self,
        processo_id: str,
        cliente_nome: str,
        aprovador_nome: str,
        destinatarios: List[str] = None
    ):
        """Notifica sobre fatura aprovada"""
        try:
            titulo = "Fatura Aprovada com Sucesso"
            
            whatsapp_msg = f"""
‚úÖ *FATURA APROVADA*

üìã Processo: {processo_id}
üè¢ Cliente: {cliente_nome}
üë§ Aprovador: {aprovador_nome}
üïê Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

‚úÖ A fatura foi aprovada e ser√° enviada para o SAT automaticamente.

*Sistema Orquestrador RPA - BGTELECOM*
            """
            
            email_html = f"""
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <div style="background-color: #f8f9fa; padding: 20px;">
                        <h2 style="color: #28a745;">‚úÖ Fatura Aprovada com Sucesso</h2>
                        
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3>Detalhes da Aprova√ß√£o:</h3>
                            <ul>
                                <li><strong>Processo:</strong> {processo_id}</li>
                                <li><strong>Cliente:</strong> {cliente_nome}</li>
                                <li><strong>Aprovador:</strong> {aprovador_nome}</li>
                                <li><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</li>
                            </ul>
                        </div>
                        
                        <p style="color: #28a745;">
                            A fatura foi aprovada e ser√° enviada para o SAT automaticamente.
                        </p>
                        
                        <hr>
                        <small style="color: #6c757d;">Sistema Orquestrador RPA - BGTELECOM</small>
                    </div>
                </body>
            </html>
            """
            
            await self._enviar_whatsapp(whatsapp_msg, destinatarios)
            await self._enviar_email(titulo, email_html, destinatarios)
            
            logger.info(f"Notifica√ß√£o de aprova√ß√£o enviada para processo {processo_id}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o de aprova√ß√£o: {e}")
    
    async def enviar_notificacao_fatura_rejeitada(
        self,
        processo_id: str,
        cliente_nome: str,
        aprovador_nome: str,
        motivo: str,
        destinatarios: List[str] = None
    ):
        """Notifica sobre fatura rejeitada"""
        try:
            titulo = "Fatura Rejeitada"
            
            whatsapp_msg = f"""
‚ùå *FATURA REJEITADA*

üìã Processo: {processo_id}
üè¢ Cliente: {cliente_nome}
üë§ Rejeitador: {aprovador_nome}
üìù Motivo: {motivo}
üïê Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

‚ùå A fatura foi rejeitada e precisar√° ser revista.

*Sistema Orquestrador RPA - BGTELECOM*
            """
            
            email_html = f"""
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <div style="background-color: #f8f9fa; padding: 20px;">
                        <h2 style="color: #dc3545;">‚ùå Fatura Rejeitada</h2>
                        
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3>Detalhes da Rejei√ß√£o:</h3>
                            <ul>
                                <li><strong>Processo:</strong> {processo_id}</li>
                                <li><strong>Cliente:</strong> {cliente_nome}</li>
                                <li><strong>Rejeitador:</strong> {aprovador_nome}</li>
                                <li><strong>Motivo:</strong> {motivo}</li>
                                <li><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</li>
                            </ul>
                        </div>
                        
                        <p style="color: #dc3545;">
                            A fatura foi rejeitada e precisar√° ser revista.
                        </p>
                        
                        <hr>
                        <small style="color: #6c757d;">Sistema Orquestrador RPA - BGTELECOM</small>
                    </div>
                </body>
            </html>
            """
            
            await self._enviar_whatsapp(whatsapp_msg, destinatarios)
            await self._enviar_email(titulo, email_html, destinatarios)
            
            logger.info(f"Notifica√ß√£o de rejei√ß√£o enviada para processo {processo_id}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o de rejei√ß√£o: {e}")
    
    async def enviar_notificacao_erro_rpa(
        self,
        operadora: str,
        cliente_nome: str,
        erro_msg: str,
        destinatarios: List[str] = None
    ):
        """Notifica sobre erro na execu√ß√£o RPA"""
        try:
            titulo = f"Erro RPA - {operadora}"
            
            whatsapp_msg = f"""
üö® *ERRO NA EXECU√á√ÉO RPA*

üì° Operadora: {operadora}
üè¢ Cliente: {cliente_nome}
‚ùå Erro: {erro_msg}
üïê Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}

üîß Verifica√ß√£o manual necess√°ria.

*Sistema Orquestrador RPA - BGTELECOM*
            """
            
            email_html = f"""
            <html>
                <body style="font-family: Arial, sans-serif;">
                    <div style="background-color: #f8f9fa; padding: 20px;">
                        <h2 style="color: #dc3545;">üö® Erro na Execu√ß√£o RPA</h2>
                        
                        <div style="background-color: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h3>Detalhes do Erro:</h3>
                            <ul>
                                <li><strong>Operadora:</strong> {operadora}</li>
                                <li><strong>Cliente:</strong> {cliente_nome}</li>
                                <li><strong>Erro:</strong> {erro_msg}</li>
                                <li><strong>Data:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</li>
                            </ul>
                        </div>
                        
                        <p style="color: #dc3545;">
                            Verifica√ß√£o manual necess√°ria. Acesse o sistema para mais detalhes.
                        </p>
                        
                        <hr>
                        <small style="color: #6c757d;">Sistema Orquestrador RPA - BGTELECOM</small>
                    </div>
                </body>
            </html>
            """
            
            await self._enviar_whatsapp(whatsapp_msg, destinatarios)
            await self._enviar_email(titulo, email_html, destinatarios)
            
            logger.info(f"Notifica√ß√£o de erro RPA enviada para {operadora}")
            
        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o de erro RPA: {e}")
    
    async def _enviar_whatsapp(self, mensagem: str, destinatarios: List[str] = None):
        """Envia mensagem via EvolutionAPI WhatsApp"""
        try:
            if not self.configuracoes.EVOLUTION_API_URL or not self.configuracoes.EVOLUTION_API_KEY:
                logger.warning("EvolutionAPI n√£o configurado. Mensagem WhatsApp n√£o enviada.")
                return
            
            if not destinatarios:
                destinatarios = ["5511999999999"]  # N√∫mero padr√£o para teste
            
            headers = {
                "Content-Type": "application/json",
                "apikey": self.configuracoes.EVOLUTION_API_KEY
            }
            
            for destinatario in destinatarios:
                # Remove caracteres especiais do n√∫mero
                numero_limpo = ''.join(filter(str.isdigit, destinatario))
                
                payload = {
                    "number": numero_limpo,
                    "text": mensagem
                }
                
                response = requests.post(
                    f"{self.configuracoes.EVOLUTION_API_URL}/message/sendText",
                    json=payload,
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code == 200:
                    logger.info(f"WhatsApp enviado para {numero_limpo}")
                else:
                    logger.error(f"Erro ao enviar WhatsApp para {numero_limpo}: {response.text}")
                    
        except Exception as e:
            logger.error(f"Erro no envio WhatsApp: {e}")
    
    async def _enviar_email(self, assunto: str, corpo_html: str, destinatarios: List[str] = None):
        """Envia email via SMTP"""
        try:
            if not self.configuracoes.SMTP_USERNAME or not self.configuracoes.SMTP_PASSWORD:
                logger.warning("SMTP n√£o configurado. Email n√£o enviado.")
                return
            
            if not destinatarios:
                destinatarios = ["admin@bgtelecom.com.br"]  # Email padr√£o para teste
            
            # Configurar mensagem
            msg = MIMEMultipart('alternative')
            msg['Subject'] = assunto
            msg['From'] = self.configuracoes.SMTP_USERNAME
            msg['To'] = ", ".join(destinatarios)
            
            # Anexar HTML
            parte_html = MIMEText(corpo_html, 'html', 'utf-8')
            msg.attach(parte_html)
            
            # Enviar email
            with smtplib.SMTP(self.configuracoes.SMTP_SERVER, self.configuracoes.SMTP_PORT) as server:
                server.starttls()
                server.login(self.configuracoes.SMTP_USERNAME, self.configuracoes.SMTP_PASSWORD)
                
                for destinatario in destinatarios:
                    server.send_message(msg, to_addrs=[destinatario])
                    logger.info(f"Email enviado para {destinatario}")
                    
        except Exception as e:
            logger.error(f"Erro no envio de email: {e}")
    
    def obter_destinatarios_aprovadores(self, db_session) -> List[str]:
        """Obt√©m lista de emails/telefones dos aprovadores"""
        try:
            from ..main import Usuario
            
            aprovadores = db_session.query(Usuario).filter(
                Usuario.perfil_usuario.in_(["ADMINISTRADOR", "APROVADOR"]),
                Usuario.status_ativo == True
            ).all()
            
            emails = [u.email for u in aprovadores if u.email]
            telefones = [u.telefone for u in aprovadores if u.telefone]
            
            return {
                "emails": emails,
                "telefones": telefones
            }
            
        except Exception as e:
            logger.error(f"Erro ao obter destinat√°rios aprovadores: {e}")
            return {"emails": [], "telefones": []}

# Inst√¢ncia global do servi√ßo
notificacao_service = NotificacaoService()